#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

/ {
    behaviors {
        // Simple hold-tap for layer/key combo

        lt_simple: layer_tap_simple {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // Simple mod-tap for modifier/key combo

        mt_simple: mod_tap_simple {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        mod_morph_sqt: mod_morph_sqt {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_MORPH_SQT";
            bindings = <&kp SEMICOLON>, <&kp SQT>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <2 1>;
            then-layer = <4>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        escape_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <2 1>;
        };

        tag_combo {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };
    };

    macros {
        altf2: altf2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LA(F2)>;

            label = "ALTF2";
        };

        altctrlrgt: altctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(RIGHT_ARROW))>;
            label = "ALTCTRL";
        };

        altctrllft: altctrllft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT))>;
            label = "ALTCTRLLFT";
        };

        wrkspcleft: wrkspcleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LS(LEFT_ARROW)))>;
            label = "WRKSPCLEFT";
        };

        wrkspcshftrght: wrkspcshftrght {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(RIGHT)))>;
            label = "WRKSPCSHFTRGHT";
        };

        hardrefresh: hardrefresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F5)>;
            label = "HARDREFRESH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W                  &kp E               &kp R              &kp T           &kp Y           &kp U                   &kp I               &kp O               &kp P
&kp A  &mt_simple LEFT_ALT S  &mt_simple LCTRL D  &mt_simple LGUI F  &kp G           &kp H           &mt_simple RIGHT_GUI J  &mt_simple RCTRL K  &mt_simple LCTRL L  &mod_morph_sqt
&kp Z  &kp X                  &kp C               &kp V              &lt_simple 3 B  &lt_simple 5 N  &kp M                   &kp COMMA           &kp DOT             &kp FSLH
                                                  &lt_simple 2 BSPC  &kp LSHFT       &kp LSHFT       &lt_simple 1 SPACE
            >;

            label = "BASE";
        };

        sym {
            bindings = <
&kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(DLLR)  &kp LS(LPAR)  &kp LS(RPAR)  &trans      &kp MINUS  &kp EQUAL         &kp BSLH
&kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(LT)    &kp LS(LBRC)  &kp LS(RBRC)  &kp LS(GT)  &kp DEL    &kp SINGLE_QUOTE  &kp SEMI
&kp LS(AMPS)  &kp LS(STAR)   &kp GRAVE      &trans        &kp LBKT      &kp RBKT      &trans      &kp COMMA  &kp DOT           &kp FSLH
                                            &trans        &trans        &trans        &trans
            >;

            label = "SYMB";
        };

        nav {
            bindings = <
&trans  &kp LA(F2)              &altctrllft        &kp LS(LG(UP_ARROW))  &kp LS(LG(DOWN))        &kp PAGE_UP    &kp LC(PG_UP)  &kp UP    &kp END        &kp END
&trans  &kp LS(LG(LEFT_ARROW))  &kp LS(LG(RIGHT))  &kp LG(LC(UP_ARROW))  &kp LG(LC(DOWN_ARROW))  &kp PAGE_DOWN  &kp LEFT       &kp DOWN  &kp RIGHT      &trans
&trans  &trans                  &trans             &trans                &trans                  &kp RG(M)      &trans         &trans    &kp LC(SPACE)  &kp LG(SLASH)
                                                   &trans                &trans                  &trans         &trans
            >;

            label = "NAV";
        };

        num {
            bindings = <
&kp N1         &kp N2  &kp N3  &kp N4  &kp N5  &kp N6        &kp N7  &kp N8  &kp N9  &kp N0
&kp LS(CARET)  &trans  &trans  &trans  &trans  &kp LS(STAR)  &kp N4  &kp N5  &kp N6  &kp LS(PLUS)
&kp EQUAL      &trans  &trans  &trans  &trans  &kp FSLH      &kp N1  &kp N2  &kp N3  &kp MINUS
                               &trans  &trans  &trans        &trans
            >;

            label = "NUM";
        };

        adj {
            bindings = <
&bt BT_CLR    &bt BT_CLR_ALL  &trans        &bt BT_PRV    &bt BT_NXT    &kp C_SLEEP           &trans                &trans  &kp C_BRI_DN  &bootloader
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &kp C_VOL_DN          &kp C_VOL_UP          &trans  &trans        &trans
&bootloader   &trans          &trans        &trans        &trans        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &trans  &trans        &bootloader
                                            &trans        &trans        &trans                &trans
            >;

            label = "ADJ";
        };

        fkey {
            bindings = <
&kp F1   &kp F2  &kp F3        &kp F4  &kp F5        &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F11  &trans  &trans        &trans  &hardrefresh  &trans  &trans  &trans  &trans  &kp F11
&kp F12  &trans  &hardrefresh  &trans  &trans        &trans  &trans  &trans  &trans  &kp F12
                               &trans  &trans        &trans  &trans
            >;

            label = "FUNC";
        };
    };
};

&lt { tapping-term-ms = <200>; };

&mt { tapping-term-ms = <200>; };
