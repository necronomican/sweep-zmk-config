#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

/ {
    behaviors {
        // Simple hold-tap for layer/key combo

        lt_simple: layer_tap_simple {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        // Simple mod-tap for modifier/key combo

        mt_simple: mod_tap_simple {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        escape_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <2 1>;
        };

        tag_combo {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };
    };

    macros {
        altf2: altf2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&macro_press>, <&kp LA(F2)>;

            label = "ALTF2";
        };

        altctrlrgt: altctrl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(LA(RIGHT_ARROW))>;
            label = "ALTCTRL";
        };

        altctrllft: altctrllft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LEFT))>;
            label = "ALTCTRLLFT";
        };

        wrkspcleft: wrkspcleft {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LA(LC(LS(LEFT_ARROW)))>;
            label = "WRKSPCLEFT";
        };

        wrkspcshftrght: wrkspcshftrght {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LA(LC(RIGHT)))>;
            label = "WRKSPCSHFTRGHT";
        };

        hardrefresh: hardrefresh {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LC(F5)>;
            label = "HARDREFRESH";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp Q  &kp W               &kp E              &kp R              &kp T      &kp Y      &kp U               &kp I              &kp O               &kp P
&kp A  &mt_simple LCTRL S  &mt_simple LALT D  &mt_simple LGUI F  &kp G      &kp H      &mt_simple LGUI J   &mt_simple LALT K  &mt_simple LCTRL L  &kp SEMI
&kp Z  &kp X               &kp C              &kp V              &kp B      &kp N      &kp M               &kp COMMA          &kp DOT             &kp FSLH
                                              &lt_simple 2 BSPC  &kp LSHFT  &kp LSHFT  &lt_simple 1 SPACE
            >;
        };

        nav {
            bindings = <
&wrkspcleft           &wrkspcshftrght   &altctrllft           &altctrlrgt       &altf2      &kp PAGE_UP    &kp LC(PG_UP)  &kp UP    &kp LC(PG_DN)  &kp DELETE
&trans                &kp LCTRL         &kp LALT              &kp LGUI          &kp DELETE  &kp PAGE_DOWN  &kp LEFT       &kp DOWN  &kp RIGHT      &kp BSLH
&kp LS(LG(UP_ARROW))  &kp LS(LG(DOWN))  &kp LC(LG(UP_ARROW))  &kp LG(LC(DOWN))  &mo 4       &trans         &kp HOME       &kp END   &kp LC(SPACE)  &kp LC(SPACE)
                                                              &mo 2             &kp LSHFT   &trans         &trans
            >;
        };

        sym {
            bindings = <
&kp N1     &kp N2     &kp N3    &kp N4            &kp N5             &kp N6          &kp N7           &kp N8                &kp N9                 &kp N0
&kp GRAVE  &kp LCTRL  &kp LALT  &kp LGUI          &trans             &kp BSLH        &kp MINUS        &kp EQUAL             &kp LBKT               &kp SINGLE_QUOTE
&trans     &trans     &trans    &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp GRAVE
                                &trans            &trans             &kp LSHFT       &mo 1
            >;
        };

        adj {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR_ALL  &kp C_SLEEP  &trans  &trans  &kp C_BRI_DN  &kp C_BRI_UP
&trans        &trans        &trans        &trans        &trans          &trans       &trans  &trans  &kp C_VOL_DN  &kp C_VOL_UP
&bootloader   &trans        &trans        &trans        &trans          &trans       &trans  &trans  &trans        &bootloader
                                          &trans        &trans          &trans       &trans
            >;
        };

        fkey {
            bindings = <
&kp F1   &kp F2  &kp F3        &kp F4  &kp F5  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10
&kp F11  &trans  &trans        &trans  &trans  &trans  &trans  &trans  &trans  &kp F11
&kp F12  &trans  &hardrefresh  &trans  &trans  &trans  &trans  &trans  &trans  &kp F12
                               &trans  &trans  &trans  &trans
            >;
        };
    };
};

&lt { tapping-term-ms = <200>; };

&mt { tapping-term-ms = <200>; };